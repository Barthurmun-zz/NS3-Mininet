diff --git a/mininet/net.py b/mininet/net.py
index 8e39c7b..65e4dd8 100755
--- a/mininet/net.py
+++ b/mininet/net.py
@@ -99,13 +99,14 @@
 from mininet.cli import CLI
 from mininet.log import info, error, debug, output, warn
 from mininet.node import ( Node, Host, OVSKernelSwitch, DefaultController,
-                           Controller )
+                           Controller, AP, Station )
 from mininet.nodelib import NAT
 from mininet.link import Link, Intf
 from mininet.util import ( quietRun, fixLimits, numCores, ensureRoot,
                            macColonHex, ipStr, ipParse, netParse, ipAdd,
                            waitListening )
 from mininet.term import cleanUpScreens, makeTerms
+from mininet.clean import cleanup

 # Mininet version: should be consistent with README and LICENSE
 VERSION = "2.2.1"
@@ -244,6 +245,34 @@ def addSwitch( self, name, cls=None, **params ):
         self.nameToNode[ name ] = sw
         return sw

+    def addAP( self, name, cls=None, **params ):
+        defaults = { 'listenPort': self.listenPort,
+                     'inNamespace': self.inNamespace }
+        defaults.update( params )
+        ap = AP( name, **defaults )
+        if not self.inNamespace and self.listenPort:
+            self.listenPort += 1
+        self.switches.append( ap )
+        self.nameToNode[ name ] = ap
+        return ap
+
+    def addStation( self, name, cls=None, **params ):
+        defaults = { 'ip': ipAdd( self.nextIP,
+                                  ipBaseNum=self.ipBaseNum,
+                                  prefixLen=self.prefixLen ) +
+                                  '/%s' % self.prefixLen }
+        if self.autoSetMacs:
+            defaults[ 'mac' ] = macColonHex( self.nextIP )
+        if self.autoPinCpus:
+            defaults[ 'cores' ] = self.nextCore
+            self.nextCore = ( self.nextCore + 1 ) % self.numCores
+        self.nextIP += 1
+        defaults.update( params )
+        sta = Station( name, **defaults )
+        self.hosts.append( sta )
+        self.nameToNode[ name ] = sta
+        return sta
+
     def addController( self, name='c0', controller=None, **params ):
         """Add controller.
            controller: Controller class"""
@@ -531,6 +560,8 @@ def stop( self ):
         for host in self.hosts:
             info( host.name + ' ' )
             host.terminate()
+        info( '*** Clean all interfaces\n')
+        cleanup()
         info( '\n*** Done\n' )

     def run( self, test, *args, **kwargs ):
